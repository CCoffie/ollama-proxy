events { worker_connections 1024; }

http {
    # Define a custom log format including the authenticated user
    log_format proxy_auth '$remote_addr - $authenticated_user [$time_local] "$request" ' 
                        '$status $body_bytes_sent "$http_referer" "$http_user_agent"';

    # Send Nginx logs to stdout/stderr for Docker capture
    access_log /dev/stdout proxy_auth;
    error_log /dev/stderr notice;  # Reduced from debug to notice level

    upstream ollama_backend {
        # Using network_mode: host, connect directly to host's localhost
        # Ensure Ollama is listening on 127.0.0.1:11434 on the host
        server 127.0.0.1:11434;
    }

    server {
        listen ${NGINX_PORT};
        server_name localhost;

        location / {
            # Check authentication for all requests
            auth_request /_auth;

            # Capture the X-Authenticated-User header returned from the auth service
            auth_request_set $authenticated_user $upstream_http_x_authenticated_user;

            # Proxy to Ollama
            proxy_pass http://ollama_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400;
        }

        # Define what happens on auth failure (401)
        error_page 401 = @error401;
        location @error401 {
            return 401 'Unauthorized: Invalid or missing API key';
        }

        # Internal location for authentication requests
        location = /_auth {
            internal; 
            proxy_pass http://127.0.0.1:3000/auth;
            proxy_pass_request_body off; 
            proxy_set_header Authorization $http_authorization;
            
            # Important! Preserve original request headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Original-URI $request_uri;
        }
    }
} 