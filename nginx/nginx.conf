events { worker_connections 1024; }

http {
    # Define a custom log format including the authenticated user
    log_format proxy_auth '$remote_addr - $authenticated_user [$time_local] "$request" ' 
                        '$status $body_bytes_sent "$http_referer" "$http_user_agent"';

    # Send Nginx logs to stdout/stderr for Docker capture
    access_log /dev/stdout proxy_auth;
    error_log /dev/stderr notice;

    # Increase request body size limits
    client_max_body_size 50M;
    client_body_buffer_size 10M;
    
    # Set proper temp paths with permissions
    client_body_temp_path /var/cache/nginx/client_temp 1 2;
    proxy_temp_path /var/cache/nginx/proxy_temp 1 2;

    upstream ollama_backend {
        # Using network_mode: host, connect directly to host's localhost
        # Ensure Ollama is listening on 127.0.0.1:11434 on the host
        server 127.0.0.1:11434;
    }

    server {
        listen ${NGINX_PORT};
        server_name localhost;

        # Handle all requests
        location / {
            # Handle OPTIONS preflight requests immediately
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' '$http_origin' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept' always;
                add_header 'Access-Control-Max-Age' 1728000 always;
                return 204;
            }
            
            # Check authentication for all non-OPTIONS requests
            auth_request /_auth;
            auth_request_set $authenticated_user $upstream_http_x_authenticated_user;

            # Add CORS headers to all responses
            add_header 'Access-Control-Allow-Origin' '$http_origin' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept' always;

            # Proxy to Ollama with proper headers
            proxy_pass http://ollama_backend;
            proxy_set_header Host 127.0.0.1;  # Make Ollama accept the request
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Pass the request body completely before sending to upstream
            proxy_request_buffering on;
            
            # Hide CORS headers from Ollama
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;

            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeouts for large responses
            proxy_read_timeout 600;
            proxy_connect_timeout 600;
            proxy_send_timeout 600;
            
            # Buffer sizes for responses
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
        }

        # Handle auth failures
        error_page 401 = @error401;
        location @error401 {
            add_header 'Access-Control-Allow-Origin' '$http_origin' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            return 401 'Unauthorized: Invalid or missing API key';
        }

        # Internal auth endpoint
        location = /_auth {
            internal; 
            proxy_pass http://127.0.0.1:3000/auth;
            proxy_pass_request_body off; 
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Host $host;
        }
    }
} 